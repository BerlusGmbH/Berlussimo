<?php

namespace App\Services\Parser\Personen\Filter;

use Exception;

class Lexer
{
    public $counter;
    public $token;
    public $value;
    public $node;
    public $line;
    private $data;
    private $state = 1;

    function __construct($data)
    {
        $this->data = $data;
        $this->counter = 0;
        $this->line = 1;
    }

    /*!lex2php
    %input $this->data
    %counter $this->counter
    %token $this->token
    %value $this->value
    %line $this->line
    person_name = ~person.name~
    person_vorname = ~person.vorname~
    person_id = ~person.id~
    einheit_name = ~einheit.name~
    einheit_lage = ~einheit.lage~
    einheit_id = ~einheit.id~
    haus_strasse = ~haus.strasse~
    haus_nummer = ~haus.nummer~
    haus_plz = ~haus.plz~
    haus_ort = ~haus.ort~
    haus_id = ~haus.id~
    objekt_name = ~objekt.name~
    objekt_id = ~objekt.id~
    mietvertrag_von = ~mietvertrag.von~
    mietvertrag_bis = ~mietvertrag.bis~
    mietvertrag_laufzeit = ~mietvertrag.laufzeit~
    mietvertrag_id = ~mietvertrag.id~
    kaufvertrag_von = ~kaufvertrag.von~
    kaufvertrag_bis = ~kaufvertrag.bis~
    kaufvertrag_id = ~kaufvertrag.id~
    eq = ~=~
    like = /~/
    and = ~and~
    or = ~or~
    lt = ~<~
    le = ~<=|=<~
    gt = ~>~
    ge = ~>=|=>~
    openp = ~\(~
    closep = ~\)~
    value = ~("(\pL|\pN|\pS|\pP|\pZ)+"|(\pL|\pN|\pS|\p{Pd}|\p{Po})+)~
    whitespace = /\pZ+/
    */
    /*!lex2php
    %statename START
    whitespace {
      return false;
    }
    person_name {
      $this->token = Parser::PERSON_NAME;
    }
    person_vorname {
      $this->token = Parser::PERSON_VORNAME;
    }
    person_id {
      $this->token = Parser::PERSON_ID;
    }
    einheit_name {
      $this->token = Parser::EINHEIT_NAME;
    }
    einheit_lage {
      $this->token = Parser::EINHEIT_LAGE;
    }
    einheit_id {
      $this->token = Parser::EINHEIT_ID;
    }
    haus_strasse {
      $this->token = Parser::HAUS_STRASSE;
    }
    haus_nummer {
      $this->token = Parser::HAUS_NUMMER;
    }
    haus_plz {
      $this->token = Parser::HAUS_PLZ;
    }
    haus_ort {
      $this->token = Parser::HAUS_ORT;
    }
    haus_id {
      $this->token = Parser::HAUS_ID;
    }
    objekt_name {
      $this->token = Parser::OBJEKT_NAME;
    }
    objekt_id {
      $this->token = Parser::OBJEKT_ID;
    }
    mietvertrag_von {
      $this->token = Parser::MIETVERTRAG_VON;
    }
    mietvertrag_bis {
      $this->token = Parser::MIETVERTRAG_BIS;
    }
    mietvertrag_laufzeit {
      $this->token = Parser::MIETVERTRAG_LAUFZEIT;
    }
    mietvertrag_id {
      $this->token = Parser::MIETVERTRAG_ID;
    }
    kaufvertrag_von {
      $this->token = Parser::KAUFVERTRAG_VON;
    }
    kaufvertrag_bis {
      $this->token = Parser::KAUFVERTRAG_BIS;
    }
    kaufvertrag_id {
      $this->token = Parser::KAUFVERTRAG_ID;
    }
    eq {
      $this->token = Parser::EQ;
    }
    like {
      $this->token = Parser::LIKE;
    }
    and {
      $this->token = Parser::AND;
    }
    or {
      $this->token = Parser::OR;
    }
    lt {
      $this->token = Parser::LT;
    }
    le {
      $this->token = Parser::LE;
    }
    gt {
      $this->token = Parser::GT;
    }
    ge {
      $this->token = Parser::GE;
    }
    openp {
      $this->token = Parser::OPENP;
    }
    closep {
      $this->token = Parser::CLOSEP;
    }
    value {
      $this->token = Parser::VALUE;
      $before = strlen($this->value);
      $this->value = trim($this->value, '"');
      $after = strlen($this->value);
      $this->counter += $before - $after;
    }
    */
}